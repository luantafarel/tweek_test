# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: user
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

# you can overwrite defaults here

# you can add statements to the Lambda function's IAM Role here
Description: This stack creates an IAM role that can be used by Serverless Framework Pro for use in deployments.
Resources:
  SFProRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::802587217904:root
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: "ServerlessEnterprise-J9V12zhcN0QFTVqq1c"
      Path: /
      RoleName: SFProRole-default
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  ReporterFunction:
    Type: Custom::SFProReporter
    Properties:
      ServiceToken: "arn:aws:lambda:us-east-1:802587217904:function:event-gateway-dashboard-backend-prod-saveIamRoleToProfile"
      OrgId: J9V12zhcN0QFTVqq1c
      RoleArn: arn:aws:iam::579258516853:role/SFProRole-default
      ProfileName: tweek_test
Outputs:
  SFProRoleArn:
    Description: "ARN for the IAM Role used by SF Pro"
    Value: arn:aws:iam::579258516853:role/SFProRole-default
Parameters:
  OrgId:
    Description: SF Pro Org Id
    Type: String
  ProfileName:
    Description: SF Pro Profile Name
    Type: String
  RoleName:
    Description: SF Pro Role Name
    Type: String
# iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - "s3:ListBucket"
#     Resource: { "Fn::Join" : ["", ["arn:aws:s3:::tweekexam", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#   - Effect: "Allow"
#     Action:
#       - "s3:PutObject"
#     Resource:
#       Fn::Join:
#         - ""
#         - - "arn:aws:s3:::tweekexam"
#           - "Ref" : "ServerlessDeploymentBucket"
#           - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
  userRegister:
    handler: src/controller.register
    memorySize: 128
    description: Register a user in the system.
    events:
      - http:
          path: user/register
          method: post
  userlogin:
    handler: src/controller.login
    memorySize: 128
    description: Login a user in the system.
    events:
      - http:
          path: user/login
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
